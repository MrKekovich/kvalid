package io.github.kverify.core.validator

import io.github.kverify.core.context.ValidationContext
import io.github.kverify.core.exception.ValidationException
import io.github.kverify.core.violation.Violation
import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.contract

/**
 * A [ValidationContext] implementation that throws a [ValidationException]
 * on the first validation failure.
 *
 * This validator immediately interrupts the validation process if a failure
 * occurs, throwing [ValidationException] with the specified [Violation]. It is
 * useful in scenarios where validation errors should halt execution.
 */
open class ThrowingValidator : ValidationContext {
    /**
     * Throws a [ValidationException] with the given [violation].
     *
     * This method interrupts the validation process and provides
     * an exception describing the validation failure.
     *
     * @param violation The violation object describing why the validation failed.
     * @throws ValidationException Always thrown with the provided [violation].
     */
    override fun onFailure(violation: Violation): Nothing = throw ValidationException(listOf(violation))

    /**
     * Validates a condition and throws an exception with a [Violation] if the condition is `false`.
     *
     * The provided [condition] is evaluated, and if it is `false`, [ValidationException] is thrown
     * with the failure message generated by the [lazyViolation] lambda.
     *
     * @param condition The condition to validate.
     * @param lazyViolation A lambda to produce the [Violation] if the condition fails.
     */
    @OptIn(ExperimentalContracts::class)
    fun validate(
        condition: Boolean,
        lazyViolation: () -> Violation,
    ) {
        contract {
            returns() implies condition
        }

        if (!condition) onFailure(lazyViolation())
    }
}
